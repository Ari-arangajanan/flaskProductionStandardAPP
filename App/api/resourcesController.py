from flask import Blueprint, jsonify, requestfrom App.Models.User import Userfrom App.serviceLayer.UserServices import UserServicesfrom flask_jwt_extended import create_access_token, jwt_required, get_jwt_identityapi_bp = Blueprint('api', __name__)@api_bp.route('/login', methods=['POST'])def login():    data = request.get_json()    email = data.get('email')    password = data.get('password')    user = User.query.filter_by(email=email).first()    if user and user.check_password(password):        access_token = create_access_token(identity={"email": user.email})        return jsonify(            accessToken=access_token,            username=email        ), 200    return jsonify({"msg": "Bad email or password"}), 401@api_bp.route('/users', methods=['GET'])@jwt_required()def get_users():    current_user = get_jwt_identity()    users = User.query.all()    return jsonify([user.to_dict() for user in users])@api_bp.route('/me', methods=['GET'])@jwt_required()def get_user():    current_user = get_jwt_identity()    users = User.query.filter_by(email=current_user.get("email")).first()    return jsonify(users.to_dict())@api_bp.route('/user', methods=['POST'])def add_user():    data = request.get_json()    username = data.get('username')    email = data.get('email')    password = data.get('password')    new_user = User(username=username, email=email)    new_user.password = password    response, status = UserServices.register_user(new_user)    return jsonify(response), status